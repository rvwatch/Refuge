// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should match the snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    addFitBitData={[Function]}
    addHeartRate={[Function]}
    addStepsTaken={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <header
          className="App-header"
>
          <NavLink
                    activeClassName="active"
                    ariaCurrent="true"
                    className="logo-wrap"
                    to="/"
          >
                    <img
                              alt="Icon"
                              className="logo"
                              src="MainLogo.svg"
                    />
          </NavLink>
          <div
                    className="account"
          >
                    <a
                              href="http://localhost:3000/logout"
                    >
                              Logout 
                    </a>
                    <Link
                              replace={false}
                              to="/login"
                    >
                               Login 
                    </Link>
          </div>
</header>,
        <Route
          exact={true}
          path="/"
          render={[Function]}
/>,
        <Switch>
          <Route
                    exact={true}
                    path="/login"
                    render={[Function]}
          />
          <Route
                    exact={true}
                    path="/breathing"
                    render={[Function]}
          />
          <Route
                    component={[Function]}
                    exact={true}
                    path="/mindfulness"
          />
          <Route
                    component={[Function]}
                    exact={true}
                    path="/sound"
          />
          <Route
                    component={[Function]}
                    exact={true}
                    path="/journal"
          />
          <Route
                    component={[Function]}
                    exact={true}
                    path="/videos"
          />
          <Route
                    component={[Function]}
                    exact={true}
                    path="/support"
          />
</Switch>,
      ],
      "className": "App",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <NavLink
              activeClassName="active"
              ariaCurrent="true"
              className="logo-wrap"
              to="/"
>
              <img
                            alt="Icon"
                            className="logo"
                            src="MainLogo.svg"
              />
</NavLink>,
            <div
              className="account"
>
              <a
                            href="http://localhost:3000/logout"
              >
                            Logout 
              </a>
              <Link
                            replace={false}
                            to="/login"
              >
                             Login 
              </Link>
</div>,
          ],
          "className": "App-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "activeClassName": "active",
              "ariaCurrent": "true",
              "children": <img
                alt="Icon"
                className="logo"
                src="MainLogo.svg"
/>,
              "className": "logo-wrap",
              "to": "/",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "Icon",
                "className": "logo",
                "src": "MainLogo.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <a
                  href="http://localhost:3000/logout"
>
                  Logout 
</a>,
                <Link
                  replace={false}
                  to="/login"
>
                   Login 
</Link>,
              ],
              "className": "account",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Logout ",
                  "href": "http://localhost:3000/logout",
                },
                "ref": null,
                "rendered": "Logout ",
                "type": "a",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": " Login ",
                  "replace": false,
                  "to": "/login",
                },
                "ref": null,
                "rendered": " Login ",
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "exact": true,
          "path": "/",
          "render": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Route
              exact={true}
              path="/login"
              render={[Function]}
/>,
            <Route
              exact={true}
              path="/breathing"
              render={[Function]}
/>,
            <Route
              component={[Function]}
              exact={true}
              path="/mindfulness"
/>,
            <Route
              component={[Function]}
              exact={true}
              path="/sound"
/>,
            <Route
              component={[Function]}
              exact={true}
              path="/journal"
/>,
            <Route
              component={[Function]}
              exact={true}
              path="/videos"
/>,
            <Route
              component={[Function]}
              exact={true}
              path="/support"
/>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "exact": true,
              "path": "/login",
              "render": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "exact": true,
              "path": "/breathing",
              "render": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/mindfulness",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/sound",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/journal",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/videos",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/support",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <header
            className="App-header"
>
            <NavLink
                        activeClassName="active"
                        ariaCurrent="true"
                        className="logo-wrap"
                        to="/"
            >
                        <img
                                    alt="Icon"
                                    className="logo"
                                    src="MainLogo.svg"
                        />
            </NavLink>
            <div
                        className="account"
            >
                        <a
                                    href="http://localhost:3000/logout"
                        >
                                    Logout 
                        </a>
                        <Link
                                    replace={false}
                                    to="/login"
                        >
                                     Login 
                        </Link>
            </div>
</header>,
          <Route
            exact={true}
            path="/"
            render={[Function]}
/>,
          <Switch>
            <Route
                        exact={true}
                        path="/login"
                        render={[Function]}
            />
            <Route
                        exact={true}
                        path="/breathing"
                        render={[Function]}
            />
            <Route
                        component={[Function]}
                        exact={true}
                        path="/mindfulness"
            />
            <Route
                        component={[Function]}
                        exact={true}
                        path="/sound"
            />
            <Route
                        component={[Function]}
                        exact={true}
                        path="/journal"
            />
            <Route
                        component={[Function]}
                        exact={true}
                        path="/videos"
            />
            <Route
                        component={[Function]}
                        exact={true}
                        path="/support"
            />
</Switch>,
        ],
        "className": "App",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <NavLink
                activeClassName="active"
                ariaCurrent="true"
                className="logo-wrap"
                to="/"
>
                <img
                                alt="Icon"
                                className="logo"
                                src="MainLogo.svg"
                />
</NavLink>,
              <div
                className="account"
>
                <a
                                href="http://localhost:3000/logout"
                >
                                Logout 
                </a>
                <Link
                                replace={false}
                                to="/login"
                >
                                 Login 
                </Link>
</div>,
            ],
            "className": "App-header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "activeClassName": "active",
                "ariaCurrent": "true",
                "children": <img
                  alt="Icon"
                  className="logo"
                  src="MainLogo.svg"
/>,
                "className": "logo-wrap",
                "to": "/",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "Icon",
                  "className": "logo",
                  "src": "MainLogo.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <a
                    href="http://localhost:3000/logout"
>
                    Logout 
</a>,
                  <Link
                    replace={false}
                    to="/login"
>
                     Login 
</Link>,
                ],
                "className": "account",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Logout ",
                    "href": "http://localhost:3000/logout",
                  },
                  "ref": null,
                  "rendered": "Logout ",
                  "type": "a",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": " Login ",
                    "replace": false,
                    "to": "/login",
                  },
                  "ref": null,
                  "rendered": " Login ",
                  "type": [Function],
                },
              ],
              "type": "div",
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "exact": true,
            "path": "/",
            "render": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                exact={true}
                path="/login"
                render={[Function]}
/>,
              <Route
                exact={true}
                path="/breathing"
                render={[Function]}
/>,
              <Route
                component={[Function]}
                exact={true}
                path="/mindfulness"
/>,
              <Route
                component={[Function]}
                exact={true}
                path="/sound"
/>,
              <Route
                component={[Function]}
                exact={true}
                path="/journal"
/>,
              <Route
                component={[Function]}
                exact={true}
                path="/videos"
/>,
              <Route
                component={[Function]}
                exact={true}
                path="/support"
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "exact": true,
                "path": "/login",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "exact": true,
                "path": "/breathing",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/mindfulness",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/sound",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/journal",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/videos",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/support",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
